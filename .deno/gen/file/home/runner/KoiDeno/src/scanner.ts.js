import { TokenType } from './token_type.ts';
export default class Scanner {
    source;
    tokens;
    start = 0;
    line = 0;
    current = 0;
    keywords = new Map();
    on_error;
    constructor(source, on_error) {
        this.source = source;
        this.tokens = [];
        this.keywords.set("and", TokenType.AND);
        this.keywords.set("or", TokenType.OR);
        this.keywords.set("not", TokenType.NOT);
        this.keywords.set("if", TokenType.IF);
        this.keywords.set("else", TokenType.ELSE);
        this.keywords.set("class", TokenType.CLASS);
        this.keywords.set("true", TokenType.TRUE);
        this.keywords.set("false", TokenType.FALSE);
        this.keywords.set("nil", TokenType.NIL);
        this.keywords.set("fun", TokenType.FUN);
        this.keywords.set("for", TokenType.FOR);
        this.keywords.set("while", TokenType.WHILE);
        this.keywords.set("print", TokenType.PRINT);
        this.keywords.set("return", TokenType.RETURN);
        this.keywords.set("super", TokenType.SUPER);
        this.keywords.set("this", TokenType.THIS);
        this.keywords.set("var", TokenType.VAR);
        this.on_error = on_error;
    }
    scan_tokens() {
        while (!this.is_at_end()) {
            this.start = this.current;
            this.tokenize();
        }
        this.tokens.push({
            type: TokenType.EOF,
            lexeme: "",
            literal: null,
            line: this.line,
        });
        return this.tokens;
    }
    tokenize() {
        const char = this.advance();
        switch (char) {
            case "(":
                this.add_token(TokenType.LEFT_PAREN);
            default:
                this.advance();
        }
    }
    advance() {
        this.current++;
        return this.source[this.current - 1];
    }
    is_at_end() {
        return this.current >= this.source.length;
    }
    add_token(type, literal = null) {
        const text = this.source.slice(this.start, this.current);
        this.tokens.push({
            type,
            lexeme: text,
            literal,
            line: this.line
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nhbm5lci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImZpbGU6Ly8vaG9tZS9ydW5uZXIvS29pRGVuby9zcmMvc2Nhbm5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFNUMsTUFBTSxDQUFDLE9BQU8sT0FBTyxPQUFPO0lBQzNCLE1BQU0sQ0FBUztJQUNmLE1BQU0sQ0FBZTtJQUNyQixLQUFLLEdBQVcsQ0FBQyxDQUFDO0lBQ2xCLElBQUksR0FBVyxDQUFDLENBQUM7SUFDakIsT0FBTyxHQUFXLENBQUMsQ0FBQztJQUNwQixRQUFRLEdBQTJCLElBQUksR0FBRyxFQUFFLENBQUM7SUFDN0MsUUFBUSxDQUFXO0lBQ25CLFlBQVksTUFBYyxFQUFFLFFBQWtCO1FBQzdDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMxQixDQUFDO0lBQ0QsV0FBVztRQUNWLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1lBQzFCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUNoQjtRQUNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1lBQ2hCLElBQUksRUFBRSxTQUFTLENBQUMsR0FBRztZQUNuQixNQUFNLEVBQUUsRUFBRTtZQUNWLE9BQU8sRUFBRSxJQUFJO1lBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ04sQ0FBQyxDQUFDO1FBQ1osT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BCLENBQUM7SUFDTyxRQUFRO1FBQ2YsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBRTVCLFFBQVEsSUFBSSxFQUFFO1lBQ2IsS0FBSyxHQUFHO2dCQUNQLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1lBQ3JDO2dCQUNDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNoQjtJQUNGLENBQUM7SUFDTyxPQUFPO1FBQ2QsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2YsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNPLFNBQVM7UUFDaEIsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzNDLENBQUM7SUFDTyxTQUFTLENBQUMsSUFBZSxFQUFFLFVBQXlCLElBQUk7UUFDL0QsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7WUFDaEIsSUFBSTtZQUNKLE1BQU0sRUFBRSxJQUFJO1lBQ1osT0FBTztZQUNQLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtTQUNOLENBQUMsQ0FBQztJQUNiLENBQUM7Q0FDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRva2VuIH0gZnJvbSAnLi90b2tlbi50cyc7XG5pbXBvcnQgeyBUb2tlblR5cGUgfSBmcm9tICcuL3Rva2VuX3R5cGUudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY2FubmVyIHtcblx0c291cmNlOiBzdHJpbmc7XG5cdHRva2VuczogQXJyYXk8VG9rZW4+O1xuXHRzdGFydDogbnVtYmVyID0gMDtcblx0bGluZTogbnVtYmVyID0gMDtcblx0Y3VycmVudDogbnVtYmVyID0gMDtcblx0a2V5d29yZHM6IE1hcDxzdHJpbmcsIFRva2VuVHlwZT4gPSBuZXcgTWFwKCk7XG5cdG9uX2Vycm9yOiBGdW5jdGlvbjtcblx0Y29uc3RydWN0b3Ioc291cmNlOiBzdHJpbmcsIG9uX2Vycm9yOiBGdW5jdGlvbikge1xuXHRcdHRoaXMuc291cmNlID0gc291cmNlO1xuXHRcdHRoaXMudG9rZW5zID0gW107XG5cdFx0dGhpcy5rZXl3b3Jkcy5zZXQoXCJhbmRcIiwgVG9rZW5UeXBlLkFORCk7XG4gICAgICAgIHRoaXMua2V5d29yZHMuc2V0KFwib3JcIiwgVG9rZW5UeXBlLk9SKTtcbiAgICAgICAgdGhpcy5rZXl3b3Jkcy5zZXQoXCJub3RcIiwgVG9rZW5UeXBlLk5PVCk7XG4gICAgICAgIHRoaXMua2V5d29yZHMuc2V0KFwiaWZcIiwgVG9rZW5UeXBlLklGKTtcbiAgICAgICAgdGhpcy5rZXl3b3Jkcy5zZXQoXCJlbHNlXCIsIFRva2VuVHlwZS5FTFNFKTtcbiAgICAgICAgdGhpcy5rZXl3b3Jkcy5zZXQoXCJjbGFzc1wiLCBUb2tlblR5cGUuQ0xBU1MpO1xuICAgICAgICB0aGlzLmtleXdvcmRzLnNldChcInRydWVcIiwgVG9rZW5UeXBlLlRSVUUpO1xuICAgICAgICB0aGlzLmtleXdvcmRzLnNldChcImZhbHNlXCIsIFRva2VuVHlwZS5GQUxTRSk7XG4gICAgICAgIHRoaXMua2V5d29yZHMuc2V0KFwibmlsXCIsIFRva2VuVHlwZS5OSUwpO1xuICAgICAgICB0aGlzLmtleXdvcmRzLnNldChcImZ1blwiLCBUb2tlblR5cGUuRlVOKTtcbiAgICAgICAgdGhpcy5rZXl3b3Jkcy5zZXQoXCJmb3JcIiwgVG9rZW5UeXBlLkZPUik7XG4gICAgICAgIHRoaXMua2V5d29yZHMuc2V0KFwid2hpbGVcIiwgVG9rZW5UeXBlLldISUxFKTtcbiAgICAgICAgdGhpcy5rZXl3b3Jkcy5zZXQoXCJwcmludFwiLCBUb2tlblR5cGUuUFJJTlQpO1xuICAgICAgICB0aGlzLmtleXdvcmRzLnNldChcInJldHVyblwiLCBUb2tlblR5cGUuUkVUVVJOKTtcbiAgICAgICAgdGhpcy5rZXl3b3Jkcy5zZXQoXCJzdXBlclwiLCBUb2tlblR5cGUuU1VQRVIpO1xuICAgICAgICB0aGlzLmtleXdvcmRzLnNldChcInRoaXNcIiwgVG9rZW5UeXBlLlRISVMpO1xuICAgICAgICB0aGlzLmtleXdvcmRzLnNldChcInZhclwiLCBUb2tlblR5cGUuVkFSKTtcblx0XHR0aGlzLm9uX2Vycm9yID0gb25fZXJyb3I7XG5cdH1cblx0c2Nhbl90b2tlbnMoKTogQXJyYXk8VG9rZW4+IHtcblx0XHR3aGlsZSAoIXRoaXMuaXNfYXRfZW5kKCkpIHtcblx0XHRcdHRoaXMuc3RhcnQgPSB0aGlzLmN1cnJlbnQ7XG5cdFx0XHR0aGlzLnRva2VuaXplKCk7XG5cdFx0fVxuXHRcdHRoaXMudG9rZW5zLnB1c2goe1xuXHRcdFx0dHlwZTogVG9rZW5UeXBlLkVPRixcblx0XHRcdGxleGVtZTogXCJcIixcblx0XHRcdGxpdGVyYWw6IG51bGwsXG5cdFx0XHRsaW5lOiB0aGlzLmxpbmUsXG5cdFx0fSBhcyBUb2tlbik7XG5cdFx0cmV0dXJuIHRoaXMudG9rZW5zO1xuXHR9XG5cdHByaXZhdGUgdG9rZW5pemUoKSB7XG5cdFx0Y29uc3QgY2hhciA9IHRoaXMuYWR2YW5jZSgpO1xuXG5cdFx0c3dpdGNoIChjaGFyKSB7XG5cdFx0XHRjYXNlIFwiKFwiOlxuXHRcdFx0XHR0aGlzLmFkZF90b2tlbihUb2tlblR5cGUuTEVGVF9QQVJFTilcblx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdHRoaXMuYWR2YW5jZSgpO1xuXHRcdH1cblx0fVxuXHRwcml2YXRlIGFkdmFuY2UoKTogc3RyaW5nIHtcblx0XHR0aGlzLmN1cnJlbnQrKztcblx0XHRyZXR1cm4gdGhpcy5zb3VyY2VbdGhpcy5jdXJyZW50IC0gMV07XG5cdH1cblx0cHJpdmF0ZSBpc19hdF9lbmQoKSB7XG5cdFx0cmV0dXJuIHRoaXMuY3VycmVudCA+PSB0aGlzLnNvdXJjZS5sZW5ndGg7XG5cdH1cblx0cHJpdmF0ZSBhZGRfdG9rZW4odHlwZTogVG9rZW5UeXBlLCBsaXRlcmFsOiBzdHJpbmcgfCBudWxsID0gbnVsbCkge1xuXHRcdGNvbnN0IHRleHQgPSB0aGlzLnNvdXJjZS5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmN1cnJlbnQpO1xuXHRcdHRoaXMudG9rZW5zLnB1c2goe1xuXHRcdFx0dHlwZSxcblx0XHRcdGxleGVtZTogdGV4dCxcblx0XHRcdGxpdGVyYWwsXG5cdFx0XHRsaW5lOiB0aGlzLmxpbmVcblx0XHR9IGFzIFRva2VuKTtcblx0fVxufSJdfQ==